{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Traversome","text":"<p>Genomic structure frequency estimation from traversal paths of long reads mapped to genome assembly graphs.</p>"},{"location":"#assembly-graphs","title":"Assembly graphs","text":"<p>...</p>"},{"location":"#graph-alignment","title":"Graph Alignment","text":"<p>...</p>"},{"location":"#traversal-information","title":"Traversal information","text":"<p>Traversome uses a heuristic approach to propose different genome structures based on a seed and extend model using information from the traversal paths of long reads mapped to an assembly graph. Given the start and end position of a mapped read, and its length, the  number of times that this read can traverse a repetitive region of the assembly graph is contrained, and can be estimated...</p>"},{"location":"#structural-variation-frequency-estimation","title":"Structural variation frequency estimation","text":"<p>Traversome fits a statistical model to estimate the frequencies of  different genome structural variants in a sample based on the ...</p>"},{"location":"#implementation","title":"Implementation","text":"<p>traversome is written as both a command line tool and an interactive Python API. The former allows users to easily run and automate  computationally intensive steps, while the latter offers a number  of useful tools for interactively visualizing and assessing input  data and results.</p>"},{"location":"#developerscontributors","title":"Developers/Contributors","text":"<ul> <li>Jianjun Jin, Columbia University</li> <li>Deren Eaton, Columbia University</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p> Traversome is still in development.</p> <pre><code># clone the main branch and cd into it\ngit clone ...\ncd Traversome\n\n# install dependencies with pip or conda...\npip install -e .\n</code></pre>"},{"location":"installation/#python-libraries","title":"Python libraries","text":"<p>Whenever possible we strive to use as few Python dependencies as possible,  and to develop examples using the most common libraries for scientific  programing in Python. Currently this includes the following:</p> <ul> <li>Python Data Science:  <ul> <li>Numpy: arrays, tensors, and numeric processing.  </li> <li>Pandas: tabular dataframes, statistical processing.  </li> <li>Scipy: statistical distributions.  </li> <li>...</li> </ul> </li> </ul>"},{"location":"installation/#external-binaries","title":"External binaries","text":"<ul> <li>long read mapper...</li> </ul>"},{"location":"quick-guide/","title":"Quick Guide","text":"<p>This tutorial provides a brief walk through of a simple Traversome analysis. For more details on each step of this analysis see the relevant section of  of the documentation.</p>"},{"location":"quick-guide/#the-dataset","title":"The Dataset","text":"<p>The kakapo genome was sequenced and assembled as part of the Vertebrate Genome Project (VGP) as described in a recent paper (... et al. ...). In this paper the kakapo was highlighted as an example for which the mitochondrial genome assembly exhibited evidence of heteroplasmy...</p>"},{"location":"quick-guide/#assembly-graph-estimation","title":"Assembly Graph Estimation","text":"<p>For this sample data high depth sequencing data is available in the form of  both short Illumina paired reads as well as PacBio RSII long reads. The  former has greater accuracy and depth and is therefore better suited to  infer an accurate assembly graph representing all contigs in the genome,  and evidence of connections between them. </p>"},{"location":"quick-guide/#assembly-graph-visualization","title":"Assembly Graph Visualization","text":"<p>... more details.</p>"},{"location":"quick-guide/#graph-alignment-mapping","title":"Graph Alignment Mapping","text":"<p>...</p>"},{"location":"quick-guide/#graph-alignment-assessment","title":"Graph Alignment Assessment","text":"<p>...</p>"},{"location":"quick-guide/#traversome-structural-variant-estimation","title":"Traversome Structural Variant Estimation","text":"<p>...</p>"},{"location":"quick-guide/#traversome-variant-visualization","title":"Traversome Variant Visualization","text":"<p>...</p>"},{"location":"quick-guide/#conclusion","title":"Conclusion","text":"<p>...</p>"},{"location":"assembly-graph/example-1/","title":"Example assembly graph inference","text":""},{"location":"assembly-graph/example-1/#dataset-description","title":"Dataset description","text":"<p>...</p>"},{"location":"assembly-graph/example-1/#download-the-data","title":"Download the data","text":"<p>Download ...</p>"},{"location":"assembly-graph/example-1/#run-getorganelle","title":"Run getOrganelle","text":"<p>...</p>"},{"location":"assembly-graph/example-1/#visualize-in-bandage","title":"Visualize in Bandage","text":"<p>...</p>"},{"location":"assembly-graph/example-1/#manual-curation","title":"Manual curation","text":"<p>...</p>"},{"location":"assembly-graph/introduction/","title":"Assembly Graphs","text":"<p>An assembly graph represents all contigs in a genome assembly as well as all observed connections between them. Most genome assembly software will return an assembly graph as a GFA or ... formatted file. </p>"},{"location":"assembly-graph/introduction/#assembly-graph-format","title":"Assembly graph format","text":"<p>An example assembly graph will contain information like the  following:</p> <pre><code>...\n</code></pre>"},{"location":"assembly-graph/introduction/#assembly-graph-inference","title":"Assembly graph inference","text":"<p>Assembly software tools vary ...</p> <pre><code>getOrganelle -x -y -z\n</code></pre>"},{"location":"assembly-graph/introduction/#visualizing-assembly-graphs","title":"Visualizing assembly graphs","text":""},{"location":"assembly-graph/introduction/#manual-curation","title":"Manual curation","text":""},{"location":"graph-alignment/introduction/","title":"Introduction","text":"<p>introduction.md</p>"}]}